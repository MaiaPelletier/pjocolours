devtools::document()
?devtools::document
library(devtools)
devtools::build()
install()
devtools::document()
devtools::check()
pjo_palettes
names(pjo_palettes)
palette(pjo_palettes$LightningThief)
nationalparkcolors::park_palette('Everglades')
test_pjo_palette <- function(name, n) {
pal <- pjo_palettes[[name]]
if (is.null(pal))
stop("Palette not found.")
if (missing(n)) {
n <- length(pal)
}
if (n > length(pal)) {
stop("Number of requested colors greater than what palette can offer")
}
out <- pal[1:n]
structure(out, class = "palette", name = name)
}
#' @export
#' @importFrom graphics rect par image text
#' @importFrom grDevices rgb
print.palette <- function(x, ...) {
n <- length(x)
old <- par(mar = c(0.5, 0.5, 0.5, 0.5))
on.exit(par(old))
image(1:n, 1, as.matrix(1:n), col = x,
ylab = "", xaxt = "n", yaxt = "n", bty = "n")
rect(0, 0.9, n + 1, 1.1, col = rgb(1, 1, 1, 0.8), border = NA)
text((n + 1) / 2, 1, labels = attr(x, "name"), cex = 1, family = "Arial", col = "#32373D")
}
library(pjocolors)
names(pjo_palettes)
test_pjo_palette('LightningThief')
#' @export
#' @importFrom graphics rect par image text
#' @importFrom grDevices rgb
print.palette <- function(x, ...) {
n <- length(x)
old <- par(mar = c(0.5, 0.5, 0.5, 0.5))
on.exit(par(old))
image(1:n, 1, as.matrix(1:n), col = x,
ylab = "", xaxt = "n", yaxt = "n", bty = "n")
rect(0, 0.9, n + 1, 1.1, col = rgb(1, 1, 1, 0.8), border = NA)
text((n + 1) / 2, 1, labels = attr(x, "name"), cex = 1, family = "Arial", col = "grey30")
}
test_pjo_palette('LightningThief')
names(pjo_palettes)
test_pjo_palette('SeaOfMonsters')
test_pjo_palette('TitansCurse')
test_pjo_palette('BatOfTheLabyrinth')
names(pjo_palettes)
test_pjo_palette('LastOlympian')
#' @export
#' @importFrom graphics rect par image text
#' @importFrom grDevices rgb
print.palette <- function(x, ...) {
n <- length(x)
old <- par(mar = c(0.5, 0.5, 0.5, 0.5))
on.exit(par(old))
image(1:n, 1, as.matrix(1:n), col = x,
ylab = "", xaxt = "n", yaxt = "n", bty = "n")
rect(0, 0.9, n + 1, 1.1, col = rgb(1, 1, 1, 0.8), border = NA)
text((n + 1) / 2, 1, labels = attr(x, "name"), cex = 1, col = "grey30")
}
test_pjo_palette <- function(name, n) {
pal <- pjo_palettes[[name]]
if (is.null(pal))
stop("Palette not found.")
if (missing(n)) {
n <- length(pal)
}
if (n > length(pal)) {
stop("Number of requested colors greater than what palette can offer")
}
out <- pal[1:n]
structure(out, class = "palette", name = name)
}
test_pjo_palette('BatOfTheLabyrinth')
pal <- test_pjo_palette('BatOfTheLabyrinth')
pal
devtools::build()
devtools::install()
library(tidyverse)
theme_set(theme_minimal())
test_pal <- function(palette) {
# Function to see what color palette look like
# Data has 5 distinct categories for a fill/color aesthetic
transit <-
tribble(
~city,         ~cash_fare_adult,
'Toronto',     3.25,
'Montreal',    3.50,
'Vancouver',   3.00,
'Ottawa',      3.60,
'Edmonton',    3.50,
)
# Plot data with palette
ggplot(transit, aes(city, cash_fare_adult)) +
geom_col(aes(fill = city), alpha = 0.8) +
labs(x = NULL, y = 'Adult Transit Fare') +
scale_y_continuous(labels = scales::label_dollar()) +
scale_fill_manual(values = palette, name = NULL) -> p
plot(p)
}
view_pjo_palette <- function(name, n) {
pal <- pjo_palettes[[name]]
if (is.null(pal))
stop("Palette not found.")
if (missing(n)) {
n <- length(pal)
}
if (n > length(pal)) {
stop("Number of requested colors greater than what palette can offer")
}
out <- pal[1:n]
structure(out, class = "palette", name = name)
}
#' @export
#' @importFrom graphics rect par image text
#' @importFrom grDevices rgb
print.palette <- function(x, ...) {
n <- length(x)
old <- par(mar = c(0.5, 0.5, 0.5, 0.5))
on.exit(par(old))
image(1:n, 1, as.matrix(1:n), col = x,
ylab = "", xaxt = "n", yaxt = "n", bty = "n")
rect(0, 0.9, n + 1, 1.1, col = rgb(1, 1, 1, 0.8), border = NA)
text((n + 1) / 2, 1, labels = attr(x, "name"), cex = 1, col = "grey30")
}
pal <- view_pjo_palette('TheLightningThief', n = 5)
library(pjocolors)
pal <- view_pjo_palette('TheLightningThief', n = 5)
pal <- view_pjo_palette('LightningThief', n = 5)
# Plot data with palette
ggplot(transit, aes(city, cash_fare_adult)) +
geom_col(aes(fill = city), alpha = 0.8) +
labs(x = NULL, y = 'Adult Transit Fare') +
scale_y_continuous(labels = scales::label_dollar()) +
scale_fill_manual(values = palette, name = NULL)
transit <-
tribble(
~city,         ~cash_fare_adult,
'Toronto',     3.25,
'Montreal',    3.50,
'Vancouver',   3.00,
'Ottawa',      3.60,
'Edmonton',    3.50,
)
# Plot data with palette
ggplot(transit, aes(city, cash_fare_adult)) +
geom_col(aes(fill = city), alpha = 0.8) +
labs(x = NULL, y = 'Adult Transit Fare') +
scale_y_continuous(labels = scales::label_dollar()) +
scale_fill_manual(values = palette, name = NULL)
pal
transit <-
tribble(
~city,         ~cash_fare_adult,
'Toronto',     3.25,
'Montreal',    3.50,
'Vancouver',   3.00,
'Ottawa',      3.60,
'Edmonton',    3.50,
)
pal <- view_pjo_palette('LightningThief', n = 5)
# Plot data with palette
ggplot(transit, aes(city, cash_fare_adult)) +
geom_col(aes(fill = city), alpha = 0.8) +
labs(x = NULL, y = 'Adult Transit Fare') +
scale_y_continuous(labels = scales::label_dollar()) +
scale_fill_manual(values = pal, name = NULL)
?palette
require(graphics)
palette(rainbow(6))
palette(rainbow(6))
palette(rainbow(6))
?structure
?print.palette
